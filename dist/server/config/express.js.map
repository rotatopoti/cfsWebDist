{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","urlencoded","extended","json","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","csrf","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection"],"mappings":"AAAA;;;;AAIA;;;;;;kBAmBe,UAASA,GAAT,EAAc;AAC3B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,MAAGD,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AAC1CD,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAGL,QAAQ,YAAX,EAAyB;AACvBD,QAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAEDN,MAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,MAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,MAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,MAAIO,GAAJ,CAAQ,OAAR,EAAoB,sBAAOD,IAA3B;AACAN,MAAIQ,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAV,MAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,MAAIG,GAAJ,CAAQ,4BAAR;AACAH,MAAIG,GAAJ,CAAQ,qBAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAZ,MAAIG,GAAJ,CAAQ,qBAAWU,IAAX,EAAR;AACAb,MAAIG,GAAJ,CAAQ,+BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;AACAH,MAAIG,GAAJ,CAAQ,mBAASW,UAAT,EAAR;;AAGE;AACA;AACA;AACFd,MAAIG,GAAJ,CAAQ,8BAAQ;AACdY,YAAQ,sBAAOC,OAAP,CAAeC,OADT;AAEdC,uBAAmB,IAFL;AAGdC,YAAQ,KAHM;AAIdC,WAAO,IAAIC,UAAJ,CAAe;AACpBC,0BAAoB,mBAASC,UADT;AAEpBC,UAAI;AAFgB,KAAf;AAJO,GAAR,CAAR;;AAUE;;;;AAIF,MAAGvB,QAAQ,MAAR,IAAkBA,QAAQ,aAA1B,IAA2C,CAACwB,QAAQxB,GAAR,CAAYyB,cAA3D,EAA2E;AAAE;AAC3E1B,QAAIG,GAAJ,CAAQ,qBAAM;AACZwB,YAAM,IADM;AAEZC,cAAQ,YAFI;AAGZC,YAAM;AACJC,gBAAQ,QADJ,EACc;AAClBC,2BAAmB,IAFf;AAGJC,iBAAS;AAHL,OAHM;AAQZC,qBAAe;AARH,KAAN,CAAR;AAUD;;AAED,MAAGhC,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AAC1CD,QAAIG,GAAJ,CAAQ,6BAAR,EAD0C,CACjB;AAC1B;AACF,C;;AA5ED;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIkB,aAAa,qDAAjB","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n  var env = app.get('env');\n\n  if(env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if(env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', `${config.root}/server/views`);\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n\n    // Persist sessions with MongoStore / sequelizeStore\n    // We need to enable sessions for passport-twitter because it's an\n    // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      db: 'cfs-web'\n    })\n  }));\n\n    /**\n     * Lusca - express server security\n     * https://github.com/krakenjs/lusca\n     */\n  if(env !== 'test' && env !== 'development' && !process.env.SAUCE_USERNAME) { // eslint-disable-line no-process-env\n    app.use(lusca({\n      csrf: true,\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  if(env === 'development' || env === 'test') {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}